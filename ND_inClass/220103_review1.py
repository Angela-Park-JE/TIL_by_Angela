# 0101 리뷰


### 자료형
# 리스트(list) : 여러개의 자료를 하나의 변수로 관리할 때 사용하는 자료형
# 튜플(tuple) : 여러개의 자료를 하나의 변수로 관리할 때 사용되는 면에서는 list와 거의 같지만 데이터를 변경할 수 없는 자료형
# 딕셔너리(dictionary) : 여러개의 자료를 하나의 변수로 관리하는 측면은 list나 tuple과 비슷하지만 key와 value로 이루어져 있고 순차적인 요소값으로 관리되지 않고 key값을 통해 value를 구하는 자료형
# 집합(set) : 중복이 허용되지 않고, 순서가 없는, 집합에 관련된 것을 쉽게 처리하기 위한 자료형으로 순서가 없기때문에 자료에 접근하기 위해서는 다른 형태의 자료형으로 변환해야 한다.

# 람다(lambda) : 함수를 생성할 때 사용되는 예약어로 def와 동일한 역할을 하며 일반적으로 함수를 한줄로 간결하게 만들 때 사용된다.
# 클래스(class) : 코드에서 반복되는 역할을 줄이기 위해 공통된 부분을 함수처럼 따로 정리해서 사용하지만 함수와는 다르게 서로 독립적으로 생성이 된다.(이렇게 독립적으로 생성된 부분 객체라고 한다.)
# 모듈(module) : 함수나 변수 또는 클래스는 모아 놓은 파일
# 내장 함수(Built-in Function) : 파이썬에서 기본적으로 제공되는 연산들
# 라이브러리(library) : 여러가지 용도를 가지고 있는 모듈의 모음

### 파이썬의 특징
# 고수준의 자료형 때문에 복잡한 연산을 한 문장으로 표현할 수 있습니다;
# 문장의 묶음은 괄호 대신에 들여쓰기를 통해 이루어집니다;
# 변수나 인자의 선언이 필요 없다.



# 나누기 몫만 반환 : 
  5//2
# 나누기 나머지 반환 : 
  5%2

# [시작인덱스:끝나는인덱스+1]

# sql 에서는 substr() /instr(문자, 찾는것, 어디서부터)

재고 = {'고구마': 4139, '감자': 4098, '쪽파': 100}
# 추가할 때 : 
  재고["대파"] = 321
# 지울 떄 : 
  del 재고["양파"]

# 이때 dict를 list로 반환했을 때 키만 가져와서 리스트로 생성하는 함수가 list: 
  list(재고)
# 재고 변수에 담긴 딕셔너리의 키 값을 기준으로 정렬 : 
  sorted(재고)

